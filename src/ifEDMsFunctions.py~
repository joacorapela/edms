
import math
from scipy.special import erfc
import numpy as np
from scipy.special import erfc
import pdb
from myUtils import getRealPartOfCArrayDotSRIVector

def reconstructRhos(sriLDCoefs, eigenRepos, eInputCurrentHist,
                                iInputCurrentHist, eFeedbackCurrentHist,
                                iFeedbackCurrentHist, saveRhosTimeDSFactor):
    eCurrents = eInputCurrentHist + eFeedbackCurrentHist
    iCurrents = iInputCurrentHist + iFeedbackCurrentHist
    nEigen = sriLDCoefs.shape[0]/2
    eVecs = eigenRepos.getEigenvectors(sE=eCurrents[0], sI=iCurrents[0])
    rEVecs = eVecs[:, :nEigen]
    rhos = np.empty((eVecs.shape[0], sriLDCoefs.shape[1]))
    rhos[:, 0] = getRealPartOfCArrayDotSRIVector(cArray=rEVecs,
                                                  sriVector=sriLDCoefs[:, 0])
    for i in xrange(1, sriLDCoefs.shape[1]):
        sE = eCurrents[i*saveRhosTimeDSFactor]
        sI = iCurrents[i*saveRhosTimeDSFactor]
        eVecs = eigenRepos.getEigenvectors(sE=sE, sI=sI)
        rEVecs = eVecs[:, :nEigen]
        rhos[:, i] = getRealPartOfCArrayDotSRIVector(cArray=rEVecs,
                                                      sriVector=
                                                       sriLDCoefs[:, i])
    return(rhos)

def computeA2(nVSteps, kappaMu, kappaSigma):
    # o(i, j)=w(i/(j+0.5))
    # os[i-1, j-1]=o(i, j)
    # os[i-1, j-2]=os(i, j-1)
    # os[i-2, j-2]=os(i-1, j-1)
    # os[i-2, i-2]=os(i-1, i-1)
    # os[0, j-1]=os(1, j)
    # os[0, j-2]=os(1, j-1)
    os = computeOs(nVSteps, kappaMu, kappaSigma)
    a2 = np.zeros((nVSteps, nVSteps))

    # first row
    for j in xrange(2, nVSteps+1):
        a2[1-1, j-1] = -os[0, j-2]
    # other rows
    for i in xrange(2, nVSteps+1):
        a2[i-1, i-1] = os[i-2, i-2]
        for j in xrange(i+1, nVSteps+1):
            a2[i-1, j-1] = os[i-2, j-2] - os[i-1, j-2]
    return(a2)

def computeOs(nVSteps, kappaMu, kappaSigma):
    os = np.zeros((nVSteps-1, nVSteps-1))
    for i in xrange(1, nVSteps):
        for j in xrange(i, nVSteps):
            os[i-1, j-1] = w(i/(j+0.5), kappaMu, kappaSigma)
    return(os)

def w(v, kappaMu, kappaSigma):
    den = math.sqrt(2)*kappaSigma
    commonTerm = erfc((1-kappaMu)/den)
    answer = ((erfc(((1-v)-kappaMu)/den)-commonTerm)/
              (erfc(-kappaMu/den)-commonTerm))
    return(answer)

def computeA1(nVSteps, hMu, hSigma):
    qs = computeQs(nVSteps, hMu, hSigma)
    a1 = np.diag(np.ones(nVSteps)*(-qs[0]))

    for i in xrange(1, nVSteps):
        a1 = a1 + np.diag(np.ones(nVSteps-i)*(-(qs[i]-qs[i-1])), -i)
        a1[0, i] = qs[nVSteps-1-i]
    a1[0, 0] = -(qs[0]-qs[nVSteps-1])
    return(a1)

def computeA1DiffusionApproximation(nVSteps, hMu):
    dv = 1.0/nVSteps
    a1 = np.diag(np.ones(nVSteps)*-2) +\
          np.diag(np.ones(nVSteps-1)*(1+dv/hMu), -1) +\
          np.diag(np.ones(nVSteps-1)*(1-dv/hMu),  1)
    a1[0, 0] = 1+dv/hMu
    a1[0, nVSteps-1] = -2
    a1[nVSteps-1, nVSteps-1] = -(3-dv/hMu)
    return(a1*(hMu/dv)**2/2)

def computeQs(nVSteps, hMu, hSigma):
    # q_0, ..., q_(nVSteps-1)
    ns = np.arange(nVSteps, dtype=np.float_)
    erfcDen = math.sqrt(2)*hSigma
    term1 = erfc(((ns+0.5)/nVSteps-hMu)/erfcDen)
    term2 = erfc((1-hMu)/erfcDen)
    term3 = erfc(-hMu/erfcDen)
    return((term1-term2)/(term3-term2))

def computeQRs(nVSteps, hMu, hSigma):
    qs = computeQs(nVSteps=nVSteps, hMu=hMu, hSigma=hSigma)
    return(qs[-1::-1])

def computeA0Tilde(nVSteps):
    a0 = np.diag(np.ones(nVSteps))
    a0[nVSteps-1, nVSteps-1] = -(nVSteps-1)
    aSeq = np.arange(1, nVSteps)
    a0 = a0 + np.diag(aSeq, 1)
    a0 = a0 + np.diag(-aSeq, -1)
    return(a0/2)

def computeQsMatrix(nVSteps, hMu):
    dv = 1.0/nVSteps
    b0 = np.diag(np.ones(nVSteps))*hMu/(dv**2) + \
         np.diag(np.ones(nVSteps-1),  1)*( 1.0/(2*dv)-hMu/(2*dv**2)) + \
         np.diag(np.ones(nVSteps-1), -1)*(-1.0/(2*dv)-hMu/(2*dv**2))
    b0[0, 0] = 1.0/(2*dv)+hMu/(2*dv**2)
    b0[0, nVSteps-1] = -hMu/dv**2
    b0[nVSteps-1, nVSteps-1] = 1.5*hMu/dv**2-1.0/(2*dv)
    return(b0)

def computeQ0Matrix(nVSteps, hMu, leakage, s0):
    dv = 1.0/nVSteps
    b1 = np.diag(np.ones(nVSteps))*(leakage/2-s0*hMu/dv**2)+\
         np.diag(-s0/(2*dv)+leakage/2*np.arange(1,nVSteps)+s0*hMu/(2*dv**2),1)+\
         np.diag( s0/(2*dv)-leakage/2*np.arange(1,nVSteps)+s0*hMu/(2*dv**2),-1)
    b1[0, 0] = -s0/(2*dv)+leakage/2-s0*hMu/(2*dv**2)
    b1[0, 1] = -s0/(2*dv)+leakage/2+s0*hMu/(2*dv**2)
    b1[0, nVSteps-1] = s0*hMu/dv**2
    b1[nVSteps-1, nVSteps-1] = s0/(2*dv)-leakage/2*(nVSteps-1)-1.5*s0*hMu/dv**2
    return(b1)

def buildRho0(a, b, nVSteps):
    betaRho0 = BetaRho0(nVSteps=nVSteps)
    return(betaRho0.eval(a=a, b=b))

